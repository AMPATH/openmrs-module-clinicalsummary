<?xml version="1.0"?>
<clinicalSummary>
	<currentDatetime>$!{fn.getCurrentDatetime()}</currentDatetime>
	<moduleVersion>$!{fn.getModuleVersion("clinicalsummary")}</moduleVersion>
	<templateRevision>$!{summary.getRevision()}</templateRevision>
	<templateName>$!{summary.getName()}</templateName>
	<id>$!{patient}</id>

	#foreach($id in $!{patient.getActiveIdentifiers()})
		#if ($velocityCount == 1)
			<identifier>$!{id}</identifier>
		#else
			<alternateIdentifier>$!{id}</alternateIdentifier>
		#end
	#end

	<name>
		$!{patient.getGivenName()}
		$!{patient.getMiddleName()}
		$!{patient.getFamilyName()}
	</name>

	<gender>
	#set($gender = $!{patient.getGender()})
	#if ($gender == 'M')
		Male
	#elseif ($gender == 'F')
		Female
	#else
		Unknown
	#end
	</gender>
	<birthdate estimated="$!{patient.getBirthdateEstimated()}">$!{fn.format($!{patient.getBirthdate()})}</birthdate>
	<age>$!{patient.getAge()} Years</age>

	#set($params = {"concept": ["PREGNANCY STATUS"],
	                "obs.size": 1})
	#set($pregnancyStatus = $fn.evaluate($patient, "Obs String Restrictions", $params))
	<pregnancyStatus>
		<result>$!{fn.format($pregnancyStatus)}</result>
		<datetime>$!{fn.format($pregnancyStatus.toDatetime())}</datetime>
	</pregnancyStatus>

	#set($params = {"encounterType": ["ADULTINITIAL", "ADULTRETURN", "ADULTNONCLINICALMEDICATION"],
	                "encounter.size": 1,
	                "concept": ["RETURN VISIT DATE"],
	                "obs.size": 1})
	#set($returnVisit = $fn.evaluate($patient, "Encounter Based Obs", $params))
	<returnVisit>$!{fn.format($returnVisit.toDatetime())}</returnVisit>

	#set($params = {"encounterType": ["ADULTINITIAL", "ADULTRETURN", "ADULTNONCLINICALMEDICATION"],
	                "encounter.order": "asc",
	                "encounter.size": 1})
	#set($encounterResults = $fn.evaluate($patient, "Encounter String Restrictions", $params))
	#set($earliestEncounter = $encounterResults.latest())
	<earliestEncounter>
		<datetime>$!{fn.extractProperty($earliestEncounter.getResultObject(), "encounterDatetime")}</datetime>
	</earliestEncounter>

	#set($params = {"encounterType": ["ADULTINITIAL", "ADULTRETURN", "ADULTNONCLINICALMEDICATION"],
	                "encounter.size": 1})
	#set($encounterResults = $fn.evaluate($patient, "Encounter String Restrictions", $params))
	#set($latestEncounter = $encounterResults.latest())
	<latestEncounter>
		<datetime>$!{fn.extractProperty($latestEncounter.getResultObject(), "encounterDatetime")}</datetime>
		<location>$!{fn.extractProperty($latestEncounter.getResultObject(), "location")}</location>
		<provider>$!{fn.extractProperty($latestEncounter.getResultObject(), "provider.personName")}</provider>
		<creator>$!{fn.extractProperty($latestEncounter.getResultObject(), "creator.personName")}</creator>
		<dateCreated>$!{fn.extractProperty($latestEncounter.getResultObject(), "dateCreated")}</dateCreated>
	</latestEncounter>

	#set($params = {})
	#set($problems = $fn.evaluate($patient, "Problem List", $params))
	<problemList>
		#foreach($problem in $problems)
		<problems>
			#foreach($element in $problem)
			<problem>
				<datetime>$!{fn.format($element.getResultDate())}</datetime>
				<value>$!{fn.format($element)}</value>
			</problem>
			#end
		</problems>
		#end
	</problemList>

	<medications type="arv">
		#set($params = {"encounterType": ["ADULTINITIAL", "ADULTRETURN", "ADULTNONCLINICALMEDICATION"]})
		#set($arv = $fn.evaluate($patient, "Anti Retro Viral Medications", $params))
		#foreach($element in $arv)
		<medication>
			<datetime>$!{fn.format($element.getResultDate())}</datetime>
			<value>$!{fn.format($element)}</value>
		</medication>
		#end
	</medications>

	<medications type="oi">
		#set($params = {"encounterType": ["ADULTINITIAL", "ADULTRETURN", "ADULTNONCLINICALMEDICATION"]})
		#set($pcp = $fn.evaluate($patient, "Pneumocystis Carinii Medications", $params))
		#foreach($element in $pcp)
		<medication>
			<datetime>$!{fn.format($element.getResultDate())}</datetime>
			<value>$!{fn.format($element)}</value>
		</medication>
		#end

		#set($params = {"encounterType": ["ADULTINITIAL", "ADULTRETURN", "ADULTNONCLINICALMEDICATION"]})
		#set($crypto = $fn.evaluate($patient, "Cryptococcal Medications", $params))
		#foreach($element in $crypto)
		<medication>
			<datetime>$!{fn.format($element.getResultDate())}</datetime>
			<value>$!{fn.format($element)}</value>
		</medication>
		#end

		#set($params = {"encounterType": ["ADULTINITIAL", "ADULTRETURN", "ADULTNONCLINICALMEDICATION"]})
		#set($tuberculosis = $fn.evaluate($patient, "Tuberculosis Medications", $params))
		#foreach($element in $tuberculosis)
		<medication>
			<datetime>$!{fn.format($element.getResultDate())}</datetime>
			<value>$!{fn.format($element)}</value>
		</medication>
		#end

		#set($params = {"encounterType": ["ADULTINITIAL", "ADULTRETURN", "ADULTNONCLINICALMEDICATION"]})
		#set($tuberculosis = $fn.evaluate($patient, "Tuberculosis Treatment", $params))
		#foreach($element in $tuberculosis)
		<medication>
			<datetime>$!{fn.format($element.getResultDate())}</datetime>
			<value>$!{fn.format($element)}</value>
		</medication>
		#end
	</medications>

	<flowsheet>
		<results name="WT (KG)">
			#set($params = {"concept": ["WEIGHT (KG)"]})
			#set($weight = $fn.evaluate($patient, "Obs Flowsheet", $params))
			#foreach($element in $weight)
			<result>
				<datetime>$!{fn.format($element.getResultDate())}</datetime>
				<value>$!{element.toNumber()}</value>
			</result>
			#end
		</results>
		<results name="HT (CM)">
			#set($params = {"concept": ["HEIGHT (CM)"]})
			#set($height = $fn.evaluate($patient, "Obs Flowsheet", $params))
			#foreach($element in $height)
			<result>
				<datetime>$!{fn.format($element.getResultDate())}</datetime>
				<value>$!{element.toNumber()}</value>
			</result>
			#end
		</results>
		<results name="BP">
			#set($params = {"concept": ["SYSTOLIC BLOOD PRESSURE"],
			                "obs.merged": ["DIASTOLIC BLOOD PRESSURE"]})
			#set($sbp = $fn.evaluate($patient, "Obs Merged Flowsheet", $params))
			#foreach($element in $sbp)
			<result>
				<datetime>$!{fn.format($element.getResultDate())}</datetime>
				<sbp>$!{fn.format($element.toNumber())}</sbp>
				<dbp>$!{element.getResultObject()}</dbp>
			</result>
			#end
		</results>
		<results name="HGB">
			#set($params = {"concept": ["HEMOGLOBIN"],
			                "valueCoded": ["HEMOGLOBIN", "COMPLETE BLOOD COUNT"]})
			#set($hgb = $fn.evaluate($patient, "Obs Ordered Flowsheet", $params))
			#foreach($element in $hgb)
			<result>
				<datetime>$!{fn.format($element.getResultDate())}</datetime>
				<value>$!{element.toNumber()}</value>
				<status>$!{fn.format($element)}</status>
			</result>
			#end
		</results>
		<results name="RBS">
			#set($params = {"concept": ["SERUM GLUCOSE"],
			                "valueCoded": ["SERUM GLUCOSE"]})
			#set($rbs = $fn.evaluate($patient, "Obs Ordered Flowsheet", $params))
			#foreach($element in $rbs)
			<result>
				<datetime>$!{fn.format($element.getResultDate())}</datetime>
				<value>$!{element.toNumber()}</value>
				<status>$!{fn.format($element)}</status>
			</result>
			#end
		</results>
		<results name="A1C">
			#set($params = {"concept": ["GLYCOSYLATED HEMOGLOBIN"]})
			#set($glycosylated = $fn.evaluate($patient, "Obs Flowsheet", $params))
			#foreach($element in $glycosylated)
			<result>
				<datetime>$!{fn.format($element.getResultDate())}</datetime>
				<value>$!{element.toNumber()}</value>
			</result>
			#end
		</results>
		<results name="CD4">
			#set($params = {"concept": ["CD4 COUNT"],
			                "valueCoded": ["CD4 PANEL"],
			                "obs.merged": ["CD4 PERCENT"]})
			#set($cd4 = $fn.evaluate($patient, "Obs Ordered Merged Flowsheet", $params))
			#foreach($element in $cd4)
			<result>
				<datetime>$!{fn.format($element.getResultDate())}</datetime>
				<value>$!{element.toNumber()}</value>
				<status>$!{fn.format($element)}</status>
				<percentage>$!{element.getResultObject()}</percentage>
			</result>
			#end
		</results>
	</flowsheet>

	#set($params = {"concept": ["CXR"],
	                "obs.size": 2})
	#set($cxr = $fn.evaluate($patient, "Obs String Restrictions", $params))
	<cxrs>
		#foreach($element in $cxr)
			<cxr>
				<datetime>$!{fn.format($element.getResultDate())}</datetime>
				<value>$!{fn.format($element)}</value>
			</cxr>
		#end
	</cxrs>

	<labs>
		#set($params = {"concept": ["SYPHILIS - VDRL, QUALITATIVE"],
						"obs.size": 1})
		#set($vdrl = $fn.evaluate($patient, "Obs String Restrictions", $params))
		<vdrl>
			<result>$!{fn.format($vdrl)}</result>
			<datetime>$!{fn.format($vdrl.toDatetime())}</datetime>
		</vdrl>

		#set($params = {"concept": ["WIDAL TEST"],
						"obs.size": 1})
		#set($widal = $fn.evaluate($patient, "Obs String Restrictions", $params))
		<widal>
			<result>$!{fn.format($widal)}</result>
			<datetime>$!{fn.format($widal.toDatetime())}</datetime>
		</widal>

		#set($params = {"concept": ["BRUCELLA TEST"],
						"obs.size": 1})
		#set($brucella = $fn.evaluate($patient, "Obs String Restrictions", $params))
		<brucella>
			<result>$!{fn.format($brucella)}</result>
			<datetime>$!{fn.format($brucella.toDatetime())}</datetime>
		</brucella>

		#set($params = {"concept": ["RHESUS FACTOR"],
		                "obs.size" : 1})
		#set($rhesus = $fn.evaluate($patient, "Obs String Restrictions", $params))
		<rhesus>
			<value>$!{fn.format($rhesus)}</value>
			<datetime>$!{fn.format($rhesus.getResultDate())}</datetime>
		</rhesus>
	</labs>

	<urinalysis>
		<results name="PROTEIN">
			#set($params = {"concept": ["PRESENCE OF PROTEIN"]})
			#set($protein = $fn.evaluate($patient, "Obs Flowsheet", $params))
			#foreach($element in $protein)
			<result>
				<datetime>$!{fn.format($element.getResultDate())}</datetime>
				<value>$!{fn.format($element.toConcept())}</value>
			</result>
			#end
		</results>

		<results name="SUGAR">
			#set($params = {"concept": ["PRESENCE OF SUGAR"]})
			#set($protein = $fn.evaluate($patient, "Obs Flowsheet", $params))
			#foreach($element in $protein)
			<result>
				<datetime>$!{fn.format($element.getResultDate())}</datetime>
				<value>$!{fn.format($element.toConcept())}</value>
			</result>
			#end
		</results>

		<results name="LEUKOCYTES">
			#set($params = {"concept": ["PRESENCE OF LEUKOCYTES"]})
			#set($protein = $fn.evaluate($patient, "Obs Flowsheet", $params))
			#foreach($element in $protein)
			<result>
				<datetime>$!{fn.format($element.getResultDate())}</datetime>
				<value>$!{fn.format($element.toConcept())}</value>
			</result>
			#end
		</results>
	</urinalysis>

	<sputums>
		#set($params = {"concept": ["SPUTUM FOR ACID FAST BACILLI, DETAILED"],
						"obs.setMembers": ["SPUTUM FOR ACID FAST BACILLI", "SEQUENCE OF SPUTUM FOR ACID FAST BACILLI",
		                                   "ORDER OF SPUTUM FOR ACID FAST BACILLI "]})
		#set($sputums = $fn.evaluate($patient, "Concept Set Based Obs", $params))
		#foreach ($sputum in $sputums)
			<result>
				<datetime>$!{fn.format($sputum.get(0))}</datetime>
				<value>$!{fn.format($sputum.get(1))}</value>
				<sequence>$!{fn.format($sputum.get(2))}</sequence>
				<order>$!{fn.format($sputum.get(3))}</order>
			</result>
		#end
	</sputums>

	<encounters>
		#set($encounters = $fn.evaluate($patient, "Encounter Diagnosis And Medication", {}))
		#foreach ($encounter in $encounters)
			<result>
				<type>$!{fn.format($encounter.get(0))}</type>
				<datetime>$!{fn.format($encounter.get(0).getResultDate())}</datetime>
				<diagnosis>$!{fn.format($encounter.get(1))}</diagnosis>
				<medication>$!{fn.format($encounter.get(2))}</medication>
			</result>
		#end
	</encounters>

	#set($params = {"encounterType": ["ADULTINITIAL", "ADULTRETURN", "PEDSINITIAL", "PEDSRETURN", "ANCINITIAL", "ANCRETURN"],
	                "encounter.size": 1})
	#set($encounterResults = $fn.evaluate($patient, "Encounter String Restrictions", $params))
	#set($latestEncounter = $encounterResults.latest())
	#set($typeName = $fn.extractProperty($latestEncounter.getResultObject(), "encounterType.name"))
	#if ($typeName == "ADULTINITIAL" || $typeName == "ADULTRETURN")

	<reminders displayId="true" displayText="true">
		#set($params = {"reminder": "Please check CD4. No CD4 result in system."})
		#set($reminder = $fn.evaluate($patient, "Adult Cluster Reminder", $params))
		#foreach($element in $reminder)
		<reminder>
			<id>18</id>
			<token>Adult Cluster Reminder</token>
			<value>$!{fn.format($element)}</value>
		</reminder>
		#end

		#set($params = {"reminder": "Please check Creatinine. No Creatinine result in system."})
		#set($reminder = $fn.evaluate($patient, "Adult Creatinine Reminder", $params))
		#foreach($element in $reminder)
		<reminder>
			<id>19</id>
			<token>Adult Creatinine Reminder</token>
			<value>$!{fn.format($element)}</value>
		</reminder>
		#end

		#set($params = {"reminder": "Please check Hemoglobin. No Hemoglobin result in system."})
		#set($reminder = $fn.evaluate($patient, "Adult Hemoglobin Reminder", $params))
		#foreach($element in $reminder)
		<reminder>
			<id>20</id>
			<token>Adult Hemoglobin Reminder</token>
			<value>$!{fn.format($element)}</value>
		</reminder>
		#end

		#set($params = {"reminder": "Please check SGPT. No SGPT result in system."})
		#set($reminder = $fn.evaluate($patient, "Adult SGPT Reminder", $params))
		#foreach($element in $reminder)
		<reminder>
			<id>21</id>
			<token>Adult SGPT Reminder</token>
			<value>$!{fn.format($element)}</value>
		</reminder>
		#end

		#set($params = {"reminder": "Please check Chest X-Ray. No Chest X-Ray result in system."})
		#set($reminder = $fn.evaluate($patient, "Adult CXR Reminder", $params))
		#foreach($element in $reminder)
		<reminder>
			<id>22</id>
			<token>Adult CXR Reminder</token>
			<value>$!{fn.format($element)}</value>
		</reminder>
		#end

		#set($params = {"reminder": "Consider starting ARV Medications. CD4 count < 250."})
		#set($reminder = $fn.evaluate($patient, "Cluster Anti Retro Viral Reminder", $params))
		#foreach($element in $reminder)
		<reminder>
			<id>23</id>
			<token>Cluster Anti Retro Viral Reminder</token>
			<value>$!{fn.format($element)}</value>
		</reminder>
		#end

		#set($params = {"reminder": "Consider ordering Syphilis/VDRL Test. Pt. with no Syphilis/VDRL results."})
		#set($reminder = $fn.evaluate($patient, "Adult Syphilis Reminder", $params))
		#foreach($element in $reminder)
		<reminder>
			<id>24</id>
			<token>Adult Syphilis Reminder</token>
			<value>$!{fn.format($element)}</value>
		</reminder>
		#end

		#set($params = {"reminder": "Consider checking CD4 or Viral Load. Last CD4 count down by 25% in pt. on ARVs."})
		#set($reminder = $fn.evaluate($patient, "Falling CD4 On Anti Retro Viral Reminder", $params))
		#foreach($element in $reminder)
		<reminder>
			<id>25</id>
			<token>Falling CD4 On Anti Retro Viral Reminder</token>
			<value>$!{fn.format($element)}</value>
		</reminder>
		#end

		#set($params = {"reminder": "Consider high risk EC referral.  New Pt, CD4 < 100 with no high risk EC referral."})
		#set($reminder = $fn.evaluate($patient, "Adult High Risk Express Care Referral Reminder", $params))
		#foreach($element in $reminder)
		<reminder>
			<id>26</id>
			<token>Adult High Risk Express Care Referral Reminder</token>
			<value>$!{fn.format($element)}</value>
		</reminder>
		#end

		#set($params = {"reminder": "Consider starting Iron. Last MCV below 75."})
		#set($reminder = $fn.evaluate($patient, "Low Corpuscular Volume Reminder", $params))
		#foreach($element in $reminder)
		<reminder>
			<id>27</id>
			<token>Low Corpuscular Volume Reminder</token>
			<value>$!{fn.format($element)}</value>
		</reminder>
		#end

		#set($params = {"reminder": "Consider repeat Creatinine. Cr > 200."})
		#set($reminder = $fn.evaluate($patient, "Repeat Creatinine Reminder", $params))
		#foreach($element in $reminder)
		<reminder>
			<id>28</id>
			<token>Repeat Creatinine Reminder</token>
			<value>$!{fn.format($element)}</value>
		</reminder>
		#end

		#set($params = {"reminder": "Consider Consultant or MO referral for poor renal function (two Cr results > 200)."})
		#set($reminder = $fn.evaluate($patient, "High Creatinine Referral Reminder", $params))
		#foreach($element in $reminder)
		<reminder>
			<id>29</id>
			<token>High Creatinine Referral Reminder</token>
			<value>$!{fn.format($element)}</value>
		</reminder>
		#end

		#set($params = {"reminder": "Over 10% or 5 kg wt loss. Look closer for cause."})
		#set($reminder = $fn.evaluate($patient, "Falling Weight Reminder", $params))
		#foreach($element in $reminder)
		<reminder>
			<id>30</id>
			<token>Falling Weight Reminder</token>
			<value>$!{fn.format($element)}</value>
		</reminder>
		#end

		#set($params = {"reminder": "Please repeat CXR. Last CXR over 1 mo. ago, could not rule out TB."})
		#set($reminder = $fn.evaluate($patient, "Abnormal CXR Reminder", $params))
		#foreach($element in $reminder)
		<reminder>
			<id>31</id>
			<token>Abnormal CXR Reminder</token>
			<value>$!{fn.format($element)}</value>
		</reminder>
		#end

		#set($params = {"reminder": "Please repeat CXR. Last CXR abnl in pt started on ARVs."})
		#set($reminder = $fn.evaluate($patient, "Abnormal CXR On Anti Retro Viral Reminder", $params))
		#foreach($element in $reminder)
		<reminder>
			<id>32</id>
			<token>Abnormal CXR On Anti Retro Viral Reminder</token>
			<value>$!{fn.format($element)}</value>
		</reminder>
		#end

		#set($params = {"reminder": "Consider ordering Viral Load.  CD4 < 100 on ARVs for over a year."})
		#set($reminder = $fn.evaluate($patient, "Low CD4 On Anti Retro Viral Reminder", $params))
		#foreach($element in $reminder)
		<reminder>
			<id>33</id>
			<token>Low CD4 On Anti Retro Viral Reminder</token>
			<value>$!{fn.format($element)}</value>
		</reminder>
		#end

		#set($params = {"reminder": "Consider stopping INH prophylaxis.  INH started over 9 months ago."})
		#set($reminder = $fn.evaluate($patient, "Stop Izoniazid Reminder", $params))
		#foreach($element in $reminder)
		<reminder>
			<id>34</id>
			<token>Stop Izoniazid Reminder</token>
			<value>$!{fn.format($element)}</value>
		</reminder>
		#end

		#set($params = {"reminder": "Nevirapine and Rifampin (Rifampicin) not to be used together. Consider regimen change."})
		#set($reminder = $fn.evaluate($patient, "Rifampin Nevirapine Contraindication Reminder", $params))
		#foreach($element in $reminder)
		<reminder>
			<id>35</id>
			<token>Rifampin Nevirapine Contraindication Reminder</token>
			<value>$!{fn.format($element)}</value>
		</reminder>
		#end

		#set($params = {"reminder": "Aluvia (Ritonavir / Lopinavir) and Rifampin (Rifampicin) not to be used together. Consider regimen change."})
		#set($reminder = $fn.evaluate($patient, "Rifampin Aluvia Contraindication Reminder", $params))
		#foreach($element in $reminder)
		<reminder>
			<id>36</id>
			<token>Rifampin Aluvia Contraindication Reminder</token>
			<value>$!{fn.format($element)}</value>
		</reminder>
		#end

		#set($params = {"reminder": "Check Cr every 6 months for 1st year in patient on Tenofovir."})
		#set($reminder = $fn.evaluate($patient, "Tenofovir Creatinine Monitoring Reminder", $params))
		#foreach($element in $reminder)
		<reminder>
			<id>37</id>
			<token>Tenofovir Creatinine Monitoring Reminder</token>
			<value>$!{fn.format($element)}</value>
		</reminder>
		#end

		#set($params = {"reminder": "Please order CD4 panel. Last CD4 (> 400) over 1 yr ago in pt on ARVs."})
		#set($reminder = $fn.evaluate($patient, "Over 400 CD4 On Anti Retro Viral Reminder", $params))
		#foreach($element in $reminder)
		<reminder>
			<id>38</id>
			<token>Over 400 CD4 On Anti Retro Viral Reminder</token>
			<value>$!{fn.format($element)}</value>
		</reminder>
		#end

		#set($params = {"reminder": "Please order CD4 panel. Last CD4 (> 500) over 1 yr ago in pt NOT on ARVs."})
		#set($reminder = $fn.evaluate($patient, "Over 500 CD4 No Anti Retro Viral Reminder", $params))
		#foreach($element in $reminder)
		<reminder>
			<id>39</id>
			<token>Over 500 CD4 No Anti Retro Viral Reminder</token>
			<value>$!{fn.format($element)}</value>
		</reminder>
		#end

		#set($params = {"reminder": "Please order CD4 panel. Last CD4 (< 400) over 6 mo. ago in pt on ARVs."})
		#set($reminder = $fn.evaluate($patient, "Below 400 CD4 On Anti Retro Viral Reminder", $params))
		#foreach($element in $reminder)
		<reminder>
			<id>40</id>
			<token>Below 400 CD4 On Anti Retro Viral Reminder</token>
			<value>$!{fn.format($element)}</value>
		</reminder>
		#end

		#set($params = {"reminder": "Please order CD4 panel. Last CD4 (< 500) over 6 mo. ago in pt NOT on ARVs."})
		#set($reminder = $fn.evaluate($patient, "Below 500 CD4 No Anti Retro Viral Reminder", $params))
		#foreach($element in $reminder)
		<reminder>
			<id>41</id>
			<token>Below 500 CD4 No Anti Retro Viral Reminder</token>
			<value>$!{fn.format($element)}</value>
		</reminder>
		#end

		#set($params = {"reminder": "Consider Low risk (Stable) EC referral. CD4 > 300 on ARVs."})
		#set($reminder = $fn.evaluate($patient, "Over 300 CD4 Express Care Referral Reminder", $params))
		#foreach($element in $reminder)
		<reminder>
			<id>42</id>
			<token>Over 300 CD4 Express Care Referral Reminder</token>
			<value>$!{fn.format($element)}</value>
		</reminder>
		#end

	</reminders>
	#elseif ($typeName ==  "PEDSINITIAL" || $typeName ==  "PEDSRETURN")

	<reminders displayId="true" displayText="true">
		#set($params = {"reminder": "Please order DNA PCR. Pt btn 6 wks &amp; 18 mo with no DNA PCR."})
		#set($reminder = $fn.evaluate($patient, "Baseline Polymerase Reminder", $params))
		#foreach($element in $reminder)
			<reminder>
				<id>1</id>
				<token>Baseline Polymerase Reminder</token>
				<value>$!{fn.format($element)}</value>
			</reminder>
		#end

		#set($params = {"reminder": "Please check CD4. No CD4 result in system."})
		#set($reminder = $fn.evaluate($patient, "Pediatric Cluster Reminder", $params))
		#foreach($element in $reminder)
			<reminder>
				<id>2</id>
				<token>Pediatric Cluster Reminder</token>
				<value>$!{fn.format($element)}</value>
			</reminder>
		#end

		#set($params = {"reminder": "Please check SGPT. No SGPT result in system."})
		#set($reminder = $fn.evaluate($patient, "Pediatric SGPT Reminder", $params))
		#foreach($element in $reminder)
			<reminder>
				<id>3</id>
				<token>Pediatric SGPT Reminder</token>
				<value>$!{fn.format($element)}</value>
			</reminder>
		#end

		#set($params = {"reminder": "Please check Creatinine. No Creatinine result in system."})
		#set($reminder = $fn.evaluate($patient, "Pediatric Creatinine Reminder", $params))
		#foreach($element in $reminder)
			<reminder>
				<id>4</id>
				<token>Pediatric Creatinine Reminder</token>
				<value>$!{fn.format($element)}</value>
			</reminder>
		#end

		#set($params = {"reminder": "Please check Hemoglobin. No Hemoglobin result in system."})
		#set($reminder = $fn.evaluate($patient, "Pediatric Hemoglobin Reminder", $params))
		#foreach($element in $reminder)
			<reminder>
				<id>5</id>
				<token>Pediatric Hemoglobin Reminder</token>
				<value>$!{fn.format($element)}</value>
			</reminder>
		#end

		#set($params = {"reminder": "Please check Chest X-Ray. No Chest X-Ray result in system."})
		#set($reminder = $fn.evaluate($patient, "Pediatric CXR Reminder", $params))
		#foreach($element in $reminder)
			<reminder>
				<id>6</id>
				<token>Pediatric CXR Reminder</token>
				<value>$!{fn.format($element)}</value>
			</reminder>
		#end

		#set($params = {"reminder": "Please order CD4 PANEL. Pt with positive PCR or ELISA but no CD4."})
		#set($reminder = $fn.evaluate($patient, "Positive Without CD4 Reminder", $params))
		#foreach($element in $reminder)
			<reminder>
				<id>8</id>
				<token>Positive Without CD4 Reminder</token>
				<value>$!{fn.format($element)}</value>
			</reminder>
		#end

		#set($params = {})
		#set($reminder = $fn.evaluate($patient, "Between Age Range ARV Reminder", $params))
		#foreach($element in $reminder)
			<reminder>
				<id>9</id>
				<token>Between Age Range ARV Reminder</token>
				<value>$!{fn.format($element)}</value>
			</reminder>
		#end

		#set($params = {"reminder": "Please order HIV ELISA. Pt > 18 mo old with no valid ELISA result done after age 18 mo."})
		#set($reminder = $fn.evaluate($patient, "Baseline Elisa Reminder", $params))
		#foreach($element in $reminder)
			<reminder>
				<id>10</id>
				<token>Baseline Elisa Reminder</token>
				<value>$!{fn.format($element)}</value>
			</reminder>
		#end

		#set($params = {"reminder": "Please re-order DNA PCR if patient weaned. Pt aged 6 wks-18 mo with only one PCR."})
		#set($reminder = $fn.evaluate($patient, "Repeat Polymerase Reminder", $params))
		#foreach($element in $reminder)
			<reminder>
				<id>11</id>
				<token>Repeat Polymerase Reminder</token>
				<value>$!{fn.format($element)}</value>
			</reminder>
		#end

		#set($params = {})
		#set($reminder = $fn.evaluate($patient, "Above Age Range ARV Reminder", $params))
		#foreach($element in $reminder)
			<reminder>
				<id>12</id>
				<token>Above Age Range ARV Reminder</token>
				<value>$!{fn.format($element)}</value>
			</reminder>
		#end

		#set($params = {"reminder": "Consider starting PCP Prophylaxis. Pt with positive ELISA, older than 18 mo."})
		#set($reminder = $fn.evaluate($patient, "Elisa Based PCP Reminder", $params))
		#foreach($element in $reminder)
			<reminder>
				<id>13</id>
				<token>Elisa Based PCP Reminder</token>
				<value>$!{fn.format($element)}</value>
			</reminder>
		#end

		#set($params = {"reminder": "Consider starting ARV Medications. Pt with positive HIV PCR."})
		#set($reminder = $fn.evaluate($patient, "Under Age Range ARV Reminder", $params))
		#foreach($element in $reminder)
			<reminder>
				<id>14</id>
				<token>Under Age Range ARV Reminder</token>
				<value>$!{fn.format($element)}</value>
			</reminder>
		#end

		#set($params = {"reminder": "Consider starting PCP Prophylaxis. Pt with < 2 negative DNA PCR (age 6 wk - 18 mo)."})
		#set($reminder = $fn.evaluate($patient, "Polymerase Based PCP Reminder", $params))
		#foreach($element in $reminder)
			<reminder>
				<id>15</id>
				<token>Polymerase Based PCP Reminder</token>
				<value>$!{fn.format($element)}</value>
			</reminder>
		#end

		#set($params = {"reminder": "Hospitalize for malnutrition. Last WT-for-Age Z-score in AMRS -3 or less."})
		#set($reminder = $fn.evaluate($patient, "Hospital Referral Reminder", $params))
		#foreach($element in $reminder)
			<reminder>
				<id>16</id>
				<token>Hospital Referral Reminder</token>
				<value>$!{fn.format($element)}</value>
			</reminder>
		#end

		#set($params = {"reminder": "Refer for Nutritional Support. Last WT-for-Age Z-score in AMRS -1.5 or less."})
		#set($reminder = $fn.evaluate($patient, "Nutritionist Referral Reminder", $params))
		#foreach($element in $reminder)
			<reminder>
				<id>17</id>
				<token>Nutritionist Referral Reminder</token>
				<value>$!{fn.format($element)}</value>
			</reminder>
		#end

	</reminders>
	#end

</clinicalSummary>
