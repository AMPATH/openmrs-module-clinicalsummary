<?xml version="1.0"?>
<!-- ***************************** -->
<!-- ** Clinical Summary Module ** -->
<!-- **                         ** -->
<!-- ** @author Ben Wolfe       ** -->
<!-- ** @version 1.0            ** -->
<!-- ***************************** -->
<project name="beta--clinicalsummary-module" default="package-module">

	<!-- *********************************************************** -->
	<!-- **                     TARGETS                           ** -->
	<!-- *********************************************************** -->
	<target name="init" description="initialization">
		<xmlcatalog id="common-dtds">
			<dtd 
	            publicId="-//OpenMRS//DTD OpenMRS Config 1.0//EN"
	            location="lib-common/config-1.0.dtd"/>
		</xmlcatalog>
		<xmlproperty file="metadata/config.xml" >
			<xmlcatalog refid="common-dtds"/>
		</xmlproperty>

		<path id="classpath">
			<fileset dir="lib">
				<include name="**/*.jar"/>
			</fileset>
			<fileset dir="lib-common">
				<include name="**/*.jar"/>
			</fileset>
		</path>

		<exec outputproperty="module.revision" executable="svnversion">
			<redirector>
				<outputfilterchain>
					<tokenfilter>
						<replaceregex pattern="[0-9]*:" replace="" flags="g" />
						<replaceregex pattern="[a-zA-Z]" replace="" flags="g" />
					</tokenfilter>
				</outputfilterchain>
			</redirector>
		</exec>

		<filterset id="variables.to.replace">
			<filter token="MODULE_ID" value="${module.id}" />
			<filter token="MODULE_REVISION" value="${module.revision}" />
			<filter token="MODULE_NAME" value="${module.name}" />
			<filter token="MODULE_VERSION" value="${module.version}" />
			<filter token="MODULE_PACKAGE" value="${module.package}" />
		</filterset>

	</target>

	<target name="clean" description="Delete build and dist directories">
		<delete dir="dist" />
		<delete dir="build" />
		<delete dir="reports" />
	</target>

	<target name="compile-module" depends="init" description="Compiles the module">
		<mkdir dir="build" />

		<!-- Copy other source data to the build folder -->
		<copy todir="build">
			<fileset dir="src/" excludes="**/*.java" />
		</copy>

		<!--  Compile module java files -->
		<javac destdir="build" classpathref="classpath" debug="true" debuglevel="lines,source,vars">
			<compilerarg line="-target 1.5" />
			<src path="src/" />
			<include name="**/*.java" />
		</javac>

		<!--  Compile module web java files -->
		<javac destdir="build" classpathref="classpath" debug="true" debuglevel="lines,source,vars">
			<compilerarg line="-target 1.5 -g" />
			<src path="web/src/" />
			<include name="**/*.java" />
		</javac>

	</target>

	<target name="package-module" depends="compile-module" description="Packages module into jar file">
		<mkdir dir="dist" />

		<!-- Copy module metadata -->
		<copy todir="build/">
			<fileset dir="metadata/" includes="**/*" />
			<filterset refid="variables.to.replace" />
		</copy>

		<!-- Copy module web data -->
		<copy todir="build/web/module/">
			<fileset dir="web/module/" includes="**/*" />
			<filterset refid="variables.to.replace" />
		</copy>

		<!-- Copy lib folder -->
		<!-- (lib should only contain this module's required -->
		<!-- libraries that OpenMRS doesn't contain already) -->
		<copy todir="build/lib" failonerror="false">
			<fileset dir="lib" includes="**/*" />
		</copy>

		<taskdef resource="net/sf/antcontrib/antcontrib.properties" />
		<propertyregex property="module.version" override="true" input="${module.version}" regexp="@MODULE_REVISION@" replace="${module.revision}" />

		<!-- Create distributable jar file -->
		<jar destfile="dist/${module.id}-${module.version}.omod">
			<fileset dir="build" includes="**/*" />
		</jar>
	</target>

	<target name="deploy-web" depends="package-module">
		<copy todir="/var/lib/tomcat6/webapps/openmrs/WEB-INF/view/module/clinicalsummary">
			<fileset dir="web/module" includes="**/*" />
		</copy>
	</target>

	<target name="javadocs" depends="compile-module" description="generates javadoc and also UML Diagram">
		<mkdir dir="reports/javadoc"/>
		<javadoc sourcepath="src" destdir="reports/javadoc" classpathref="classpath" packagenames="*" private="true">
			<doclet name="org.umlgraph.doclet.UmlGraphDoc" path="lib/UmlGraph-5.3.jar">
				<param name="-attributes" />
				<param name="-operations" />
				<param name="-qualify" />
				<param name="-types" />
				<param name="-visibility" />
			</doclet>
		</javadoc>
		<apply executable="dot" dest="reports" parallel="false">
			<arg value="-Tpng"/>
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<fileset dir="reports" includes="*.dot"/>
			<mapper type="glob" from="*.dot" to="*.png"/>
		</apply>
	</target>


</project>

